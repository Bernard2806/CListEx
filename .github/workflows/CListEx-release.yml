name: 🏗️ Build and Release Static Library

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      # 📥 Checkout the latest code from the repository
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for commit counting

      # 🔨 Compile C source file into an object file
      - name: 🔨 Compile CListEx.c to object file
        run: gcc -c CListEx.c -o CListEx.o

      # 📚 Create a static library archive from the object file
      - name: 📚 Create static library CListEx.a
        run: ar rcs CListEx.a CListEx.o

      # 📦 Prepare release directory and package files into a zip archive
      - name: 📦 Prepare release files
        run: |
          mkdir -p release
          cp CListEx.h CListEx.a release/
          cd release
          zip -r ../CListEx-library.zip .

      # 🔢 Get total commit count using git
      - name: 🔢 Get commit count
        id: commit_count
        run: |
          commits_count=$(git rev-list --count HEAD)
          echo "commits_count=$commits_count" >> $GITHUB_OUTPUT
          echo "📊 Total commits: $commits_count"

      # 🏷️ Calculate version from commits count
      - name: 🏷️ Calculate version from commits count
        id: version_calc
        run: |
          commits=${{ steps.commit_count.outputs.commits_count }}
          if [ "$commits" -ge 1000 ]; then
            version="1.0.0"
          elif [ "$commits" -ge 100 ]; then
            version="0.1.0"
          elif [ "$commits" -ge 10 ]; then
            version="0.0.1"
          else
            version="0.0.0"
          fi
          echo "version=$version" >> $GITHUB_OUTPUT
          echo "🎯 Generated version: v$version (based on $commits commits)"

      # 🚀 Create a GitHub release with the dynamically calculated version
      - name: 🚀 Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.version_calc.outputs.version }}
          name: 🎉 Release v${{ steps.version_calc.outputs.version }}
          body: |
            📚 **CListEx Static Library Release**
            
            This release contains:
            - 🔧 Compiled static library `CListEx.a`
            - 📄 Header file `CListEx.h`
            - 📊 Based on ${{ steps.commit_count.outputs.commits_count }} commits
            
            ## 📥 How to use:
            1. Download `CListEx-library.zip`
            2. Extract the files
            3. Link against `CListEx.a` in your C projects
            4. Include `CListEx.h` in your source code
          files: CListEx-library.zip
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
